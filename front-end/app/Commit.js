"use client"
import React, { useEffect } from "react";
import { useState } from "react";
import Web3 from "web3";
import contract from "./beacon";
import { Aladin } from "next/font/google";
// import { accounts } from "web3/lib/commonjs/eth.exports";


const Commit = () => {
    const [dataHash, setDataHash] = useState('');
    const [data , setData] = useState('')
    const [commits,setCommits] = useState([])
    const [reveals,setReveals] = useState([])
    const [randNumber,setRandNumber] = useState([])
    const [showCommits, setShowCommits] = useState(true);
    let hashVal = Web3.utils.utf8ToHex(dataHash)
     
    const [bytData , setBytData] = useState(0)
    const [saltVal,setSaltVal] = useState(0)
    const [flag , setFlag] = useState(false)
    const [displayFlag , setDisplayFlag] = useState(false)
    const [randNumFlag , setRandNumFlag] = useState(false)
    const [revealFlag , setRevealFlag] = useState(false)
    const [commitFlag , setCommitFlag] = useState(false)
    const [revealFlag2 , setRevealFlag2] = useState(false)


    let max = 3 //The no.of participants  
    
     
    
    
    //Handle boath commits and reveals to display on interface 
    const handleCommitButtonClick = () => {
        setShowCommits(true);
        };
    
    const handleRevealButtonClick = () => {
        setShowCommits(false);
        };


    //get the salt for hiding and pad to the input 
    const getBytes32 = async () => {
        try{

            if(!dataHash){

                alert("Please Give an INPUT to commit")
                return

            }

            if(!flag){    
                 
                const data1 = Web3.utils.padRight(hashVal,64)
                const salt1 = Web3.utils.sha3(""+Math.random())
                getHash(data1,salt1)
                setBytData(data1)
                setSaltVal(salt1)

             }
            
        }catch(e){
            alert(e.message)
        }
    }


    //get the HASH to commit the input
    const getHash = async(data1,salt1) =>{
        try{
             
            

            const hash = await contract.methods.getSaltedHash(data1,salt1).call()
            commitToSmartContract(hash)
            setData(hash)

        }catch(e) {
                alert(e.message)
            }

    }

     

    // commit input to the smartcontract and push the commited value to the chain
    const commitToSmartContract = async (hash) => {
        const web3 = new Web3(window.ethereum);
    
        // Convert the payment amount to Wei (1 Ether = 1e18 Wei)
        const weiAmount = web3.utils.toWei(10000, 'wei');
        try{
            const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });
            
            await contract.methods.commit(hash).send({
                from: accounts[0],
                value: weiAmount,
                gas: 3000000,
            });

            alert("Commit Successful!")
            setRevealFlag(true)
            setCommitFlag(true)

        }catch(e){
            setFlag(true)
            alert(e.message)
        }
    };


    //reveal the commited values
    const revealFunction = async () =>{
         
        try{
            const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });
            
            await contract.methods.reveal(bytData,saltVal).send({
                from: accounts[0],
                gas: 3000000,
            });

            alert("Reveal Successful!")
    
            setRevealFlag2(true)
        }catch(e){
            alert("You Dom't Have any Active Committments")
        }
    }


    

    // Get the commited values of current epoch
    const getCommits = async () => {

        const events = await contract.methods.getCommits().call()
        displayCommits(events)

    }

    const displayCommits = (events) => {
         
        try{
             
            setCommits(events);
            handleCommitButtonClick()
            setDisplayFlag(true)
            setCommitFlag(false)
           
        }catch(e){
            alert("Error in Commits events :", e.message)
        }

    };


     
    // Get the revealed values of the current epoch
    const getReveals = async () => {

        const events = await contract.methods.getReveals().call()
        displayReveals(events)

    }

    const displayReveals = (events) => {
         
        try{
             
            setReveals(events);  
            handleRevealButtonClick()
            setDisplayFlag(true)
            setRevealFlag2(false)
           
        }catch(e){
            alert("Error in Reveal events :",e.message)
        }

    };


    //Get the random number generated by the current epoch
    const getRandomNumber = async () => {
        const web3 = new Web3(window.ethereum);
        const latestBlock = await web3.eth.getBlockNumber();
        const fromBlock = latestBlock.toString() - 3;
    
        try{

            const events = await contract.getPastEvents('RandomNumber', {
            fromBlock: fromBlock,
            toBlock: 'latest'
            }, function(error, events){ console.log(events); })
                .then(function(events){
  
                displayRandomNumber(events)
                
            });
        }catch(e){
            alert(e.message)
        }

    }

    const displayRandomNumber = (events) => {

        try{

            const newEventData = events.map((event) => event.returnValues);

            setRandNumber(newEventData);
            setRandNumFlag(true)
           
        }catch(e){
            alert("Error in Commits events :",e.message)
        }

    };
     



    useEffect(() => {
        getCommits()
    }, [commitFlag]);




    useEffect(() => {
        getReveals()
    }, [revealFlag2]);




    return(
        <div className="h-screen flex ">
            <div className="w-1/5 flex flex-col  bg-gray-200 p-4 shadow appearance-none border">
                <div>
                    <button
                        className="w-full bg-blue-500 px-4 py-2 mb-3 text-white rounded-xl hover:bg-green-500"
                        onClick={getCommits}
                    >
                        Load Commits
                    </button>
                </div>
                <div>
                    <button
                        className=" w-full bg-blue-500 text-white mb-3 px-4 py-2 rounded-xl hover:bg-green-500"
                        onClick={getReveals}
                    >
                        Load Reveals
                    </button>
                </div>
                <div>
                    <button
                        className=" w-full bg-blue-500 text-white mb-3 px-4 py-2 rounded-xl hover:bg-green-500"
                        onClick={getRandomNumber}
                    >
                        Random Number
                    </button>
                </div>  
            </div>
            <div className="flex-1 w-full p-4">
                <label className="text-black rounded flex w-full">
                    <input type="text" className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" 
                        placeholder="Input" 
                        value={dataHash} onChange={(e) => setDataHash(e.target.value)} 
                    />
                    <button className="bg-blue-500 text-white px-3 py-2 rounded-xl hover:bg-green-500" 
                        onClick={getBytes32}>
                        Commit
                    </button> 
                </label>
                <h1 className="text-black">The Hash is {hashVal}</h1>
                <button className="bg-green-500 text-white px-3 py-2 rounded-xl hover:bg-blue-500" 
                    onClick={revealFunction}>
                    Reveal
                </button>
                <div className="grid grid-cols-1 gap-4 mt-4 mb-4 overflow-x-auto max-h-80">
                    {randNumFlag ? reveals.length < max ? (
                        <p className="bg-gray-100 p-4 rounded-md text-red-700"><strong>Some Users yet to Reveal Please wait</strong></p>
                            ) : (
                                randNumber.slice().reverse().map((event, index) => (
                                    <div key={index} className="bg-gray-100 p-4 rounded-md">
                                        <p className="text-gray-700 font-bold">
                                        Random Number:<strong className="px-4 text-black">{event.randNumber.toString()}</strong>
                                        </p>
                                    </div>
                                ))
                            ) 
                        : null
                    }
                </div>
                <div className="w-full">
                    <div className="px-2 mb-4">
                        <h1 className="text-xl font-bold mb-4 text-black">{ showCommits ? 'Commited Values' : 'Revealed Values'}</h1>
                        <div className="grid grid-col-1 gap-4 mt-4 overflow-x-auto max-h-80">
                            {showCommits
                                ? commits.slice().reverse().map((event, index) => (
                                    <div key={index} className="bg-gray-100 p-4 rounded-md gap-4">
                                        <p className="text-black text-lg font-semibold">Commit no. {commits.length - index }</p>
                                        <p className="text-gray-700 text-xs">Block Number: {event.blockNumber.toString()}</p>
                                        <div className="flex justify-between bg-blue-200 rounded-md item-center text-gray-700 text-black text-lg">
                                            {!event.name ?<p className="text-gray-700 font-semibold">Anonymous</p> : <p className="text-gray-700 font-semibold ">{event.name}</p> }
                                            <p className="text-gray-700 font-semibold">{event.sender}</p>
                                        </div>
                                        <p className="text-gray-700 overflow-x-auto"><strong>Commit Value: </strong>{event.commit}</p>
                                    </div>
                                ))
                                :   revealFlag || reveals.length == max? reveals.slice().reverse().map((event, index) => (
                                    <div key={index} className="bg-gray-100 p-4 rounded-md">
                                        <p className="text-black text-lg font-semibold">Reveal no. {reveals.length - index}</p>
                                        <p className="text-gray-700 text-xs">Block Number: {event.blockNumber.toString()}</p>
                                        <div className="flex justify-between bg-blue-200 rounded-md item-center text-gray-700 text-black text-lg">
                                            {!event.name ?<p className="text-gray-700 font-semibold">Anonymous</p> : <p className="text-gray-700 font-semibold ">{event.name}</p> }
                                            <p className="text-gray-700 font-semibold">{event.sender}</p>
                                        </div>
                                        <p className="text-gray-700 overflow-x-auto"><strong>Revealed Value:</strong> {(Web3.utils.hexToUtf8(event.answer).replace(/[^a-z0-9A-Z ]/g,""))}</p>
                                    </div>
                                )) 
                                : <p className="bg-gray-100 p-4 rounded-md text-red-700"><strong>Please Commit to get the Revealed Values</strong></p> 
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    )
}

export default Commit